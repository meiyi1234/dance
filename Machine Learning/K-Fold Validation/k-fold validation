# applying k-fold cross validation
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

# data analysis
import pandas as pd

# plot tool
import matplotlib.pyplot as plt

# machine learning tools
from sklearn.model_selection import train_test_split

# model
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

def KfoldValidation():
    raw_df = pd.read_csv('C:/Users/WEARE1/Documents/extracted_dataset .csv')

    X = raw_df.drop(['activity'], axis=1)
    y = raw_df['activity'].copy()
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    # Model 1: Support Vector Machines
    svc = SVC()
    svc.fit(X_train, y_train)

    # Model 2: Random Forestry
    random_forest = RandomForestClassifier(n_estimators=30)
    random_forest.fit(X_train, y_train)

    # Model 3: Decision Tree
    decision_tree = DecisionTreeClassifier()
    decision_tree.fit(X_train, y_train)


    accurancies_svm = cross_val_score(estimator=svc,X=X_train, y=y_train,cv=20)
    print("SupportVectorMachine K-Fold Validation")
    print(accurancies_svm)
    
    accurancies_rt = cross_val_score(estimator=random_forest,X=X_train, y=y_train,cv=20)
    print("RandomTree K-Fold Validation")
    print(accurancies_rt)
    
    accurancies_dt = cross_val_score(estimator=decision_tree,X=X_train, y=y_train,cv=20)
    print("DecisionTree K-Fold Validation")
    print(accurancies_dt)


KfoldValidation()
